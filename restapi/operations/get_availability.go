package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAvailabilityHandlerFunc turns a function with the right signature into a get availability handler
type GetAvailabilityHandlerFunc func(GetAvailabilityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAvailabilityHandlerFunc) Handle(params GetAvailabilityParams) middleware.Responder {
	return fn(params)
}

// GetAvailabilityHandler interface for that can handle valid get availability params
type GetAvailabilityHandler interface {
	Handle(GetAvailabilityParams) middleware.Responder
}

// NewGetAvailability creates a new http.Handler for the get availability operation
func NewGetAvailability(ctx *middleware.Context, handler GetAvailabilityHandler) *GetAvailability {
	return &GetAvailability{Context: ctx, Handler: handler}
}

/*GetAvailability swagger:route GET /availability getAvailability

GetAvailability get availability API

*/
type GetAvailability struct {
	Context *middleware.Context
	Handler GetAvailabilityHandler
}

func (o *GetAvailability) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetAvailabilityParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
