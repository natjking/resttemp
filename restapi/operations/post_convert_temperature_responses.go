package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/natjking/resttemp/models"
)

/*PostConvertTemperatureOK 200 OK

swagger:response postConvertTemperatureOK
*/
type PostConvertTemperatureOK struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewPostConvertTemperatureOK creates PostConvertTemperatureOK with default headers values
func NewPostConvertTemperatureOK() *PostConvertTemperatureOK {
	return &PostConvertTemperatureOK{}
}

// WithPayload adds the payload to the post convert temperature o k response
func (o *PostConvertTemperatureOK) WithPayload(payload *models.Response) *PostConvertTemperatureOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post convert temperature o k response
func (o *PostConvertTemperatureOK) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostConvertTemperatureOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostConvertTemperatureBadRequest 400

swagger:response postConvertTemperatureBadRequest
*/
type PostConvertTemperatureBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostConvertTemperatureBadRequest creates PostConvertTemperatureBadRequest with default headers values
func NewPostConvertTemperatureBadRequest() *PostConvertTemperatureBadRequest {
	return &PostConvertTemperatureBadRequest{}
}

// WithPayload adds the payload to the post convert temperature bad request response
func (o *PostConvertTemperatureBadRequest) WithPayload(payload *models.Error) *PostConvertTemperatureBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post convert temperature bad request response
func (o *PostConvertTemperatureBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostConvertTemperatureBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
